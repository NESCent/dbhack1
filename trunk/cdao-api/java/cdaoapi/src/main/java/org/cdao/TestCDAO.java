package org.cdao;
import java.io.InputStream;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.ResIterator;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.util.FileManager;


public class TestCDAO {

	/**
	 * Test script has been written to understand the functionality of the Java files created by Jastor (OWL to Java convertor).
	 * The API for CDAO will be designed based on the ability to extract and edit content of the CDAO
	 * individual file
	 * 
	 * The tasks are 
	 * 
	 * Basic I/O and model manipulation tasks:
	 * ======================================
	 * 
	 * 1. Read an CDAO owl instance (individual) file with Jena
	 * 2. Add a Tree and Node into the model
	 * 3. Write out the modified model as RDF again
	 * 
	 * Done - It was not very hard. It took some time for me to find the error generated by the model writer about requirement of absolute URI.
	 * But it was fixed when CDAO uri was given as input during model reading
	 * 
	 * Accessing the Individuals
	 * =========================
	 * 1. Read and find out how the individual (specific OWL instance) is different from the RDF resource
	 * 2. If they are different then 
	 *   2a. read an individual
	 *   2b. Find how to assign or cast it to the CDAO java object generated by jastor.
	 * 3. else use the RDF property directly in the API method
	 * 
	 * Basic Reasoning on the Jena model object
	 * ========================================
	 * 
	 * I can only think about it after finishing the above two task..
	 * To Do
	 * 
	 * @author vivekgopalan@gmail.com
	 * @param args
	 */
	
	public TestCDAO() {
		// TODO Auto-generated constructor stub
	}
	
	//static String CDAO_NS_PREFIX = "http://evolutionaryontology-dev.nescent.org/cdao.owl#";
	static String CDAO_NS_LOCATION = "http://localhost/~vivek/cdao.owl";
	static String CDAO_NS_PREFIX = CDAO_NS_LOCATION + "#";
	//static String CDAO_NS_PREFIX = "http://www.evolutionaryontology.org/cdao.owl#";
	//static String CDAO_NS_PREFIX = "http://localhost/~vivek/cdao.owl";
	
	public static void main(String[] args) {
		TestCDAO testCDAO = new TestCDAO();
		
		//Namespace
		
		final String CDAO_URI = CDAO_NS_PREFIX;
		String cdaoInstanceFileName = "data/trees_original-local.rdf";

		
	   //Accessing the Individuals
	   // =========================
		//1. Create an Ontology type RDF Jena model
		OntModel model = ModelFactory.createOntologyModel();
		
		

		//OntClass c = model.createClass(NS + "someClass");
		
		//2. Read the test RDF file into the model
		testCDAO.readOWLFile(cdaoInstanceFileName, model, CDAO_NS_PREFIX);
		
		
		//3. Extract an individual (not tested yet)
		Individual individual = model.getIndividual(CDAO_NS_PREFIX + "#tree1_n8");
		//Tree n = (Tree) individual;
		
		//4. Using the Factory object get or create resources as needed
		// Eg. lets create tree and node objects
		//BifurcatingTree tree = CDAOFactory.createBifurcatingTree(CDAO_NS_PREFIX+"TreeA", model);
		//n.addBelongs__to();
		/// setters add or replace statements approperately
		//Node node = CDAOFactory.createNode(CDAO_URI, model);
		//node.addBelongs__to(tree);
		
		// Create an Individual - Not tested yet
		//Individual ind0 = model.createIndividual( NS+ "ind0", c );
		
		//Iterator i = node.getHas__Support__Value();
		
		
		// SPARQL query
		
		// Get all the node and its child (my first SPARQL query)
		// Note: The query was not working and took 30 minutes for me to find out that
		// The URL http://www.evolutionaryontology.org/cdao.owl# for cdao was not working
	    // when I changed the URL to http://evolutionaryontology-dev.nescent.org/cdao.owl#
		// the query ran as expected..
		String getChildqueryString = 
			"PREFIX cdao: <" + CDAO_NS_PREFIX +"> \n" +
			"PREFIX dc: <" + "http://purl.org/dc/elements/1.1/" +"> \n" +
			"SELECT ?parent ?child \n" +
			"WHERE {\n" +
			"      ?parent cdao:has_Child_Node ?child . \n" +
			"      }\n";
		
		System.out.println(getChildqueryString);
		//testCDAO.performSparlQuery(getChildqueryString, model);
		
		
		String getAllTreesqueryString = 
			"PREFIX cdao: <" + CDAO_NS_PREFIX + ">" + " \n" +
			"PREFIX dc: <" + "http://purl.org/dc/elements/1.1/" +"> \n" +
			"PREFIX rdfs: <" + "http://www.w3.org/2000/01/rdf-schema#" +"> \n" +
			"PREFIX rdf: <" + "http://www.w3.org/1999/02/22-rdf-syntax-ns#" +"> \n" +
			"PREFIX owl: <" + "http://www.w3.org/2002/07/owl#" +"> \n" +
			"SELECT ?xx ?yy\n" +
			"WHERE {\n" +
			"      ?xx rdfs:subClassOf cdao:Tree. \n" +
			"      } \n"; 
		
		OntModel model1 = ModelFactory.createOntologyModel();
		
		//model1.read("http://www.evolutionaryontology.org/cdao.owl", "");
		model1.read(CDAO_NS_LOCATION, "");
		Model model2 = model.union(model1);
		System.out.println(getAllTreesqueryString);
		testCDAO.getTreeData(getAllTreesqueryString, model2,model);
		//model1.write(System.out);

		
		
		// Write out the modified model to the standard output
		//model1.write(System.out);
	}
	
	/**
	 * Check the existence of the RDF file and read it into the model
	 * 
	 * @param fileName
	 * @param model
	 * @param  
	 */
	public void readOWLFile(String fileName, Model model, String nameSpace) {
		InputStream in = FileManager.get().open(fileName);
		// check unavailability
		if (in == null) {
			throw new IllegalArgumentException( "File: " + fileName + " not found");
		}
		// read the RDF/XML file
		model.read(in, nameSpace);
	}
	
	public void getTreeData(String queryString, Model combinedModel,Model instanceModel){
		
		// Create a new query
		Query query = QueryFactory.create(queryString);

		// Execute the query and obtain results
		QueryExecution qe = QueryExecutionFactory.create(query,combinedModel);
		
		try {
		ResultSet results = qe.execSelect();
		//ResultSetFormatter.out(System.out, results, query);
		
		for ( ; results.hasNext() ; ) {
			System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
	      QuerySolution soln = results.nextSolution() ;
	      Resource r1 = soln.getResource("xx");
	      Resource r = instanceModel.getResource(r1.getURI());

	      System.out.println("URI : " + r1.getURI());
	      Property p =instanceModel.getProperty("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
	      ResIterator iter = instanceModel.listSubjectsWithProperty(p,r );
	      while (iter.hasNext()) {
	          System.out.println("    " + iter.nextResource().toString());
	      }
	      //CDAOFactory.getTree(, model);
	    }

		// Output query results	

		// Important - free up resources used running the query
		}finally { 
			qe.close();
		}
	}
	
	public void performSparlQuery(String queryString, Model model ){
		// Create a new query
		Query query = QueryFactory.create(queryString);

		// Execute the query and obtain results
		QueryExecution qe = QueryExecutionFactory.create(query,model);
		
		try {
			ResultSet results = qe.execSelect();
			
			// Output query results	
			ResultSetFormatter.out(System.out, results, query);
			
			// Important - free up resources used running the query
		}finally { 
			qe.close();
		}
		
	}
	
}
