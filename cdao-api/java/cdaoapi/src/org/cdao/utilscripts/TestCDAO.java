package org.cdao.utilscripts;
import java.io.InputStream;
import java.util.Iterator;

import org.cdao.jasper.BifurcatingTree;
import org.cdao.jasper.CDAOFactory;
import org.cdao.jasper.Node;
import org.cdao.jasper.Tree;
import org.w3c.dom.CDATASection;

import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.daml.DAMLModel;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.util.FileManager;


public class TestCDAO {

	/**
	 * Test script written to feel working with the Java files created by the Jastor.
	 * The API for CDAO will be designed based on the ability to extract and edit content of the CDAO
	 * individual file
	 * 
	 * The tasks are 
	 * 
	 * Basic I/O and model manipulation tasks:
	 * ======================================
	 * 
	 * 1. Read an CDAO owl instance (individual) file with Jena
	 * 2. Add a Tree and Node into the model
	 * 3. Write out the modified model as RDF again
	 * 
	 * Done - It was not very hard. It took some time for me to find the error generated by the model writer about requirement of absolute URI.
	 * But it was fixed when CDAO uri was given as input during model reading
	 * 
	 * Accessing the Individuals
	 * =========================
	 * 1. Read and find out how the individual (specific OWL instance) is different from the RDF resource
	 * 2. If they are different then 
	 *   2a. read an individual
	 *   2b. Find how to assign or cast it to the CDAO java object generated by jastor.
	 * 3. else use the RDF property directly in the API method
	 * 
	 * Basic Reasoning on the Jena model object
	 * ========================================
	 * 
	 * I can only think about it after finishing the above two task..
	 * To Do
	 * 
	 * @author vivekgopalan@gmail.com
	 * @param args
	 */
	
	public TestCDAO() {
		// TODO Auto-generated constructor stub
	}
	
	public static void main(String[] args) {
		TestCDAO testCDAO = new TestCDAO();
		
		//Namespace
		
		final String NS = "http://www.evolutionaryontology.org/cdao.owl";
		final String CDAO_URI = NS + "cdao";
		String cdaoInstanceFileName = "trees_original.rdf";

		
	 //Accessing the Individuals
	 // =========================
		OntModel model = ModelFactory.createOntologyModel();
		//OntClass c = model.createClass(NS + "someClass");
		testCDAO.readOWLFile(cdaoInstanceFileName, model);
		Individual individual = model.getIndividual(NS + "#tree1_n8");
		//Tree n = (Tree) individual;
		
		// factories get or create resources as needed
		BifurcatingTree tree = CDAOFactory.createBifurcatingTree(NS+"TreeA", model);
		 //n.addBelongs__to();
		// setters add or replace statements approperately
		 Node node = CDAOFactory.createNode(CDAO_URI, model);
		 node.addBelongs__to(tree);
		
		//Individual ind0 = model.createIndividual( NS+ "ind0", c );
		
		 //Iterator i = node.getHas__Support__Value();
		 model.write(System.out);


	}
	
	public void readOWLFile(String fileName, Model model) {
		 InputStream in = FileManager.get().open(fileName);
	        if (in == null) {
	            throw new IllegalArgumentException( "File: " + fileName + " not found");
	        }
	        // read the RDF/XML file
	        model.read(in, "http://www.evolutionaryontology.org/cdao.owl");
	}

}
